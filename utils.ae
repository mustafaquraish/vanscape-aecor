// global:   renderer: &SDLRenderer


def abs(x: i32): i32 {
    if x < 0 return -x
    return x
}

def draw_text(font: &TTFFont, text: string, x: i32, y: i32) {
    let white = SDLColor(255, 255, 255, 255)
    let msg_surf = font.render_solid(text, white)
    let msg = renderer.create_texture_from_surface(msg_surf)
    let w = 0
    let h = 0
    msg.query(null, null, &w, &h)
    let rect = SDLRect(x, y, w, h)
    renderer.copy(msg, null, &rect)
    msg_surf.destroy()
    msg.destroy()
}

struct Circle {
    x: f32
    y: f32
    radius: f32
}

def Circle::make(x: f32, y: f32, radius: f32): Circle {
    let circ: Circle
    circ.x = x
    circ.y = y
    circ.radius = radius
    return circ
}

def Circle::intersects(this, other: Circle): bool {
    let dx = .x - other.x
    let dy = .y - other.y
    let thres = .radius + other.radius
    return dx * dx + dy * dy < thres * thres
}

struct ScaledImage {
    tex: &SDLTexture
    width: i32
    height: i32
}

def ScaledImage::make(filename: string, width: i32): ScaledImage {
    let img: ScaledImage
    img.tex = renderer.load_image(filename)

    if img.tex == null {
        println("Failed to load image %s", filename)
    }

    let w = 0
    let h = 0
    img.tex.query(null, null, &w, &h)
    let aspect = w as f32 / h as f32

    img.width = width
    img.height = (width as f32 / aspect) as i32
    return img
}

def ScaledImage::rect(&this, x: i32, y: i32): SDLRect {
    return SDLRect(
        x as i32 - .width / 2,
        y as i32 - .height / 2,
        .width,
        .height,
    )
}

def ScaledImage::draw(&this, x: i32, y: i32) {
    let rect = .rect(x, y)
    renderer.copy(.tex, null, &rect)
}

def ScaledImage::draw_rotated(&this, x: i32, y: i32, angle: f32) {
    angle = degrees(angle)
    let rect = .rect(x, y)
    renderer.copy_ex(.tex, null, &rect, angle, null, 0)
}

struct AnimatedImage {
    imgs: &Vector // &Vector<&SDLTexture>
    width: i32
    height: i32

    current: i32

    // Counters to keep track of animation
    count: i32
    max_count: i32
}

def AnimatedImage::make(width: i32, height: i32, max_count: i32): AnimatedImage {
    let anim: AnimatedImage
    anim.imgs = Vector::new()
    anim.width = width
    anim.height = height
    anim.max_count = max_count
    anim.current = 0
    anim.count = 0
    return anim
}

def AnimatedImage::add(this, filename: string) {
    let img = renderer.load_image(filename)
    if img == null {
        println("Failed to load image %s", filename)
    }
    // Set up aspect ratio for first image
    if .imgs.size == 0 {
        let w = 0
        let h = 0
        img.query(null, null, &w, &h)
        let aspect = w as f32 / h as f32
        .height = (.width as f32 / aspect) as i32
    }
    .imgs.push(img)
}

def AnimatedImage::rect(&this, x: i32, y: i32): SDLRect {
    return SDLRect(
        x as i32 - .width / 2,
        y as i32 - .height / 2,
        .width,
        .height,
    )
}

def AnimatedImage::draw(&this, x: i32, y: i32) {
    let img = .imgs.at(.current) as &SDLTexture
    let rect = .rect(x, y)
    renderer.copy(img, null, &rect)
}

def AnimatedImage::draw_rotated(&this, x: i32, y: i32, angle: f32) {
    let img = .imgs.at(.current) as &SDLTexture
    angle = degrees(angle)
    let rect = .rect(x, y)
    renderer.copy_ex(img, null, &rect, angle, null, 0)
}

def AnimatedImage::update(&this) {
    .count += 1
    if .count >= .max_count {
        .count = 0
        .current += 1
        if .current >= .imgs.size {
            .current = 0
        }
    }
}