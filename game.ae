use "lib/sdl.ae"
use "lib/math.ae"
use "lib/vector.ae"

use "@/utils.ae"

///////// Configuration

let BUTTERFLY_SIZE = 40

let VAN_SPEED = 3.0
let VAN_SIZE = 100

let HEMLOCK_SIZE = 20
let HAM_SIZE = 40
let BERRY_SIZE = 20

let BULLET_SPEED = 2.0

let BULLET_SPAWN_RATE = 0.1
let HAM_SPAWN_RATE = 0.03    // 3% of spawned bullets

let NUM_BERRIES_EXPLODING = 20

///////// Globals

let renderer: &SDLRenderer
let window: &SDLWindow

let mouse_x: i32
let mouse_y: i32

/////////

struct Butterfly {
    x: f32
    y: f32
    angle: f32
    img: AnimatedImage
}

def Butterfly::make(): Butterfly {
    let butterfly: Butterfly
    butterfly.x = 0.0
    butterfly.y = 0.0
    butterfly.img = AnimatedImage::make(BUTTERFLY_SIZE, BUTTERFLY_SIZE, 1)

    // Load all images
    for let i = 1; i < 16; i += 1 {
        let filename = `assets/butterfly/frame{i}.png`
        butterfly.img.add(filename)
        free(filename)
    }

    return butterfly
}

def Butterfly::bounds(&this): Circle {
    return Circle::make(.x, .y, BUTTERFLY_SIZE as f32 / 2.0)
}

def Butterfly::draw(&this) {
    .img.draw_rotated(.x as i32, .y as i32, .angle)
}

def Butterfly::update(&this) {
    let dx = mouse_x - .x as i32
    let dy = mouse_y - .y as i32
    if abs(dx) + abs(dy) > 4 {
        .angle = -atan2(-dy as f32, dx as f32) + PI / 2.0
    }
    .x = mouse_x as f32
    .y = mouse_y as f32
    .img.update()
}

struct Van {
    x: f32
    y: f32
    angle: f32
    img: ScaledImage
}

def Van::make(): Van {
    let van: Van
    van.x = 0.0
    van.y = 0.0
    van.img = ScaledImage::make("assets/van.png", VAN_SIZE)
    return van
}

def Van::update(&this, bfly: &Butterfly) {
    let dx = bfly.x - .x
    let dy = bfly.y - .y
    let vel = 3.0
    .angle = atan2(dy, dx)
    .x += vel * cos(.angle)
    .y += vel * sin(.angle)
}

def Van::bounds(&this): Circle {
    return Circle::make(.x, .y, VAN_SIZE as f32 / 2.0)
}

def Van::draw(&this) {
    .img.draw_rotated(.x as i32, .y as i32, .angle)
}

enum BulletType {
    Hemlock
    Ham
    Berry
}

struct Bullet {
    type: BulletType
    x: f32
    y: f32
    vx: f32
    vy: f32
    size: f32
    angle: f32
    counter: i32
    finished: bool
    img: &ScaledImage
}

def Bullet::new(type: BulletType, x: f32, y: f32, vx: f32, vy: f32, img: &ScaledImage): &Bullet {
    let bullet = calloc(1, sizeof(Bullet)) as &Bullet
    bullet.type = type
    bullet.x = x
    bullet.y = y
    bullet.vx = vx
    bullet.vy = vy
    bullet.img = img
    bullet.finished = false

    match type {
        Hemlock => bullet.size = HEMLOCK_SIZE as f32
        Berry => bullet.size = BERRY_SIZE as f32
        Ham => {
            bullet.size = HAM_SIZE as f32
            // Random explosion time for BulletType::Ham
            bullet.counter = randint() % 30 + 30
        }
    }

    return bullet
}

def Bullet::bounds(&this): Circle {
    return Circle::make(.x, .y, .size / 2.0)
}

def Bullet::update(&this, game: &GameState) {
    .x += .vx
    .y += .vy

    if game.out_of_bounds(.x as i32, .y as i32) {
        .finished = true
        return
    }

    // Hemlock is always watching
    match .type {
        Hemlock => {
            .angle = atan2(mouse_x as f32 - .x, mouse_y as f32 - .y)
        }
        Ham => {
            .angle += 0.01
            .counter -= 1
            if .counter == 0 {
                for let i = 0; i < NUM_BERRIES_EXPLODING; i += 1 {
                    let frac = i as f32 / NUM_BERRIES_EXPLODING as f32
                    let angle = frac * PI * 2.0
                    let bullet = Bullet::new(
                        BulletType::Berry,
                        .x,
                        .y,
                        BULLET_SPEED * cos(angle),
                        BULLET_SPEED * sin(angle),
                        &game.berry_img
                    )
                    game.bullets.push(bullet)
                }
                .finished = true
            }
        }
        Berry => {
            .angle += 0.01
        }
    }
}

def Bullet::draw(&this) {
    .img.draw_rotated(.x as i32, .y as i32, -.angle + PI / 2.0)
}

struct GameState {
    player: Butterfly
    van: Van
    bullets: &Vector

    lives: i32
    score: i32
    best_score: i32

    width: i32
    height: i32

    // Cached
    hemlock_img: ScaledImage
    berry_img: ScaledImage
    ham_image: ScaledImage

    background_img: &SDLTexture

    font_40: &TTFFont
}

def GameState::make(width: i32, height: i32): GameState {
    let game: GameState
    game.player = Butterfly::make()
    game.van = Van::make()
    game.bullets = Vector::new()

    game.width = width
    game.height = height
    game.best_score = 0

    // Store these in the game object because we reuse them for bullets
    game.hemlock_img = ScaledImage::make("assets/hemlock.png", HEMLOCK_SIZE)
    game.ham_image = ScaledImage::make("assets/ham.png", HAM_SIZE)
    game.berry_img = ScaledImage::make("assets/berry.png", BERRY_SIZE)

    game.background_img = renderer.load_image("assets/grass.png")

    game.font_40 = TTFFont::load("assets/font.ttf", 40)
    if game.font_40 == null {
        println("Could not load font: %s", TTF::get_error())
        exit(1)
    }

    game.reset()
    return game
}

def GameState::reset(&this) {
    .player.x = .width as f32 / 2.0
    .player.y = .height as f32 / 2.0
    .set_van_to_random_corner()
    for let i = 0; i < .bullets.size; i += 1 {
        let bullet = .bullets.at(i) as &Bullet
        free(bullet)
    }
    .bullets.size = 0
    .score = 0
    .lives = 3
}

def GameState::set_van_to_random_corner(&this) {
    .van.x = (randint() % 2) as f32 * .width as f32
    .van.y = (randint() % 2) as f32 * .height as f32
}

def GameState::out_of_bounds(&this, x: i32, y: i32): bool {
    return x < 0 or x > .width or y < 0 or y > .height
}

def GameState::maybe_add_new_bullet(&this) {
    let dice = rand01()
    if dice > BULLET_SPAWN_RATE return

    dice = rand01()
    let bullet = null as &Bullet
    let angle = rand01() * 2.0 * PI

    if dice < HAM_SPAWN_RATE {
        bullet = Bullet::new(
            BulletType::Ham,
            .van.x,
            .van.y,
            BULLET_SPEED * cos(angle),
            BULLET_SPEED * sin(angle),
            &.ham_image
        )
    } else {
        bullet = Bullet::new(
            BulletType::Hemlock,
            .van.x,
            .van.y,
            BULLET_SPEED * cos(angle),
            BULLET_SPEED * sin(angle),
            &.hemlock_img
        )
    }
    .bullets.push(bullet)
}

def GameState::update(&this) {
    .player.update()
    let player_bounds = .player.bounds()

    .van.update(&.player)
    if .van.bounds().intersects(player_bounds) {
        .set_van_to_random_corner()
        .lives -= 1
    }

    let j = 0
    for let i = 0; i < .bullets.size; i += 1 {
        let bullet = .bullets.at(i) as &Bullet
        bullet.update(this)

        let off_screen = .out_of_bounds(bullet.x as i32, bullet.y as i32)
        let hit_player = bullet.bounds().intersects(player_bounds)

        // Get rid of the bullet
        if hit_player or bullet.finished {
            free(bullet)

        // Otherwise, update it and move to the first empty slot
        } else {
            .bullets.data[j] = bullet
            j += 1
        }

        if hit_player {
            .lives -= 1
        }
    }
    .bullets.size = j

    if .lives <= 0 {
        .reset()
    }

    .score += 1
    .best_score = max(.best_score, .score)

    .maybe_add_new_bullet()
}

def GameState::draw_overlay(&this) {
    let score_text = `Score: {.score}`
    draw_text(.font_40, score_text, .width / 2 - 100, 10)
    free(score_text)

    let best_text = `Best: {.best_score}`
    draw_text(.font_40, best_text, 40, 10)
    free(best_text)

    let lives_text = `Lives: {.lives}`
    draw_text(.font_40, lives_text, .width - 200, 10)
    free(lives_text)
}

def GameState::draw(&this) {
    let bg_rect = SDLRect(0, 0, .width, .height)
    renderer.copy(.background_img, null, &bg_rect)

    .player.draw()
    .van.draw()
    for let i = 0; i < .bullets.size; i += 1 {
        let bullet = .bullets.at(i) as &Bullet
        bullet.draw()
    }
    .draw_overlay()
}

// Required to branch out to emscripten
def one_step(game: &GameState): bool {
    let e: SDLEvent
    let quit = false

    while SDL::poll_event(&e) {
        match e.type {
            Quit => quit = true
            KeyDown => {
                match e.key.keysym.sym {
                    Q | Escape => quit = true
                    else => {}
                }
            }
            else => {}
        }
    }

    SDL::get_mouse_state(&mouse_x, &mouse_y)
    renderer.set_draw_color(0, 0, 0, 255)
    renderer.clear()

    game.update()
    game.draw()

    renderer.present()
    return quit
}
